%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 939.000000 225.000000
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 939 225
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 939 225
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: PingFangSC-Regular
%!FontType1-1.0: AAAAAE+PingFangHK-Regular 001.003%%CreationDate: 8/10/21% Copyright 2021 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.003) readonly def/FullName (PingFangHK-Regular) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -150 def/UnderlineThickness 58 defend readonly def/FontName /AAAAAE+PingFangHK-Regular def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 1 /gid1586 putdup 2 /gid1683 putdup 3 /gid1812 putdup 4 /gid3182 putdup 5 /gid3501 putdup 6 /gid3721 putdup 7 /gid3895 putdup 8 /gid4066 putdup 9 /gid4197 putdup 10 /gid5041 putdup 11 /gid5422 putdup 12 /gid5473 putdup 13 /gid5497 putdup 14 /gid5547 putdup 15 /gid6493 putdup 16 /gid6535 putdup 17 /gid6561 putdup 18 /gid6582 putdup 19 /gid6599 putdup 20 /gid7518 putdup 21 /gid7537 putdup 22 /gid7733 putreadonly def/FontBBox {-92 -232 1146 972} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BEBCD733EC3686D1BE04DD7A740E7D3C5D7A9AD72FC38F378F8E8E79BED62BAE00987484647D62338FBFD2764E4766ECDA57C8A75BA66BAF8917047038EB31B20ED0726C6B33BA9099D4F5E55335A1AB0C646BE9A014E0057560DFD3DA5C885F668F2A073CAB5CDD0904AD920C4DB457D28B33D9AC6F50AEE8BD477351CC5249ECEEC7625F8DC4B9103B3BA79C8CD2037D611ABACF689BD4844CC57B19930F8F2FC0F5C741AC8830898F69CF37542789199ACEF7FD619DCB28826B984BD440DF39D105F7AE53ABB4D95488CDC428C02D83D4E8717AEBD655174BB9A1E99991BAA588472B8CCB11F1011571915190C5FC350EA441CA4EA382AB94AE8D143AC161789EC8A7A451A776318E374578EE5C02AC4090CC983A0D9A6B080439313C1FBAADDB1126051839CCA3BBBF6336BDD934D9EDB88C1AEEA8701F7B98138D39C183C7EC3AFCAC5ED8272177610EF74244FE4DF5DF892130C39AAA13725D9B561844CB696F99E75D101DCA33B2EC1C44531E9E39B069FE27B0A3BD061F824380051DE3A84C44837F0A999A51B40C5A3F37816C0B6B44D2242463319FC6F36E42EE7DE120709EF148D05407090FCF3852F9B63A5F4FCE515C8D9AED9B92F888A24B6022735044FBECDA65F38623D0006D3DCC6A9A7288531311A44035D457837B97044FB3BEDA45C982EA744831927E8523B4DE83BF86EA5B5CD2BA10A0B8E65B4D247E7AA51DB8CCF4582A34CE6B01DC3F9034407B811156E83ABD0F8D12A9C80E6A63898EAEC97A179C398B15A38571AE2064C0679B077A3974B7059DF251FAA38145D44083E1370F5B46C06EC5FE5B99F914F37644D6CEA0059C1B4012C63FED95C14142D1A6980094713606FEC77BF74DDD5AFBAD782451F5595CD7F4829FA06286C963A5C724A9B6B3D15A93122F880073D4307212CD2F43A4134394360CDBBBAE70864FCAA56EA9F63F7D7D506968BF250FA69D55C008B7BB4B43B91D12AEB880015F11BFEA2747523AFCC27368473F900FABBB8D83D8AD2E1D1CB56568B59926CF4CD383C5895015011128E32B7A521EEE540C0586EECA384DF8164B6FD6BACCC480CAFD3DAE51C78510A007BE1CA33A47107CE603B14B10E4BF9F5FE9166C4AA0893C38BA3D58DDAAE42205370A1460CE0E381E163E8AE26EA96920706601C524B93BC7DEA7C2B3D294E8994E632B952AFD65F0A159C9EB03EE90A5C81DE8CF47C61140EEBCEF4BDABC766216C6D213EBEA18D5C45F8BB9695CC2CFD95023203484491D73D70207527005F713BF97A3406FB61FC45FB01B8CA1ADCB39447DCA84FD698E977FC2F808BD19DB164097509559A0ECC1120CC33E4E73D571100EC9AF08DA5B164787F11EDEEA0E5532449A729C6E13D31DEA91C62427C419D5F76C5C5A87D502218EECBA255C187AB89560235FC8CA665DD628D02E41334A742289E06C04E02781163278B56B67312A73CDE706B32F07C682A5E2B53393649763CB99BF9F8A4E1001B693ED92936DBE6EA4232492B7E66FBAD383A50DA3514DE725EC56F299813D9E6AE7ABD7AEE44F14028C9DFCF197FF6A6916F8CCC6D3B4AF8295DDF35F43A14742F8B76569F4035AE43A69B300AE684482A8D1AB58F5D84EB2190379CE37F04A68A275B5AE7E2AB7107259DBAEA2F04CC1167711F7176DDEEC487DE9F2DF64D775EFA11CC6DA90C15B6E990D07CCE28451BC78005CA2A77F4286DAC7F6B3A4127A98C544B15A83463A25EAD6CE8EE60989E4450499B95176E88A48F65C23514D6A56F98B22AAEA0C0A8FC0BAE1723B6F07AAFA6BA6F1699C76747873CDB788A57296296FFE48A0B7B3475013369EC9FA905D9F06CD17CBC36BD9A8793E38A6BD1CDE30D7AFDDAEFDAE699CEC02B6B090AF124D526F11D61929927A020DD6330C346366CFC34B241837C683003E93C1B9F41DEF0E9ABA0D168913B6F06784DE22E3ED5FEC74D1B5D8ADF27CA4F26A31BE2EA51D4B07C8FEF6301254C202218F7EBA250138366A8020815C2A48AEF773C1848E4FC250921FB1E90D032311859BB991C5115B7813A1DEC8814DEB1249667B27984D238D14F593A58E9297AFAF277306A8A48DF4B495E8CA74556571ED8FC0DA6D28131BE0918EB698CB66977E5192C6BD63017163C44C54F5302444EAC96A9E5A13B493EECC6A7FC631294DB4099393EBD615E022A044FB50B7FBB3E6500EA2983AE214974889482067895FCEFD1FD4631DE26F47D136352769FDF3A37B23ECE40D6B8DE5F8AD9F24F8D79D0C3BEABF329198816AECD175FA7019D2D533CF983112FFFC67C7FB3CDCBA0E220CA8287214B4EDE6BD0B3C54D71118D61C549BC91C2E15A17B551229A89458DA9D3EC5C9EDE908C6A797639B1E093C6D380F3DAB6D5DAA6A9EB92154BC6715A7B60709E21044A9C78E744950DCBDF9E79529D8887E2B3E0C82A453B52B1E10A218AFC368148B7DBDA6977822664F9F9E3745076F2F9B85E2A78D480D1D99EA9E0C515612A56D31BB264B66E48986E25DCB96FED0D1A5A17F92830783BA1F5A6A025EA9E7CB2EB7D32F47EBB4D71B5E5BCAE6665E76E7911ADD77D13D0FF2408056E452EC44DC2AAA7EEEE7AE26AA8D895E0769D87277B9877395619B09246533B0284F243A091B186ED19358F22237D54FA8BD43AD6EF45DAB87D351095722E3871CBE6E7BC17CF58A1B52B176AF887F2B18DB72BDEA02655B3E21E9ED5F44683CD9215E9FB01B8D86BB17EA820B2B7A13E5B998AB65BE2E0BE72D0677A75466A50E0FF1C9A66144E619378B15FC2FF0D3F2ADCBB7D95FBEF07FD92B566089DEBB6E1A2284AC5BF06D40B53CE1C668B8439A0DAB789FAD562BE50C1D6FAC162490A0FE0F2CA1FE04542FD0326ABFA19AC6AD8067AC1E2C59FEC6D3EEB88017C0F69BC452B7043969C0583E5F1983C055C8B904B95AB82258278EC8675A9326F7FC70F153C3DDDC5A4C3EEC31D647BAADF217CD3EA5793677E2A6E43ACA4CB7CC47D6B29E0E1A424DDDD103AADAE94815CD3171151423DEE6FB5F93F8B3E634037491E9264BCA2646E56A15A0276A894795A5661D1C690523E6CA4D52406284D93F403196593031B262EBB65676F66F3C42DDE1EDBA7C417E76B1B6CD10827597C2AA050FB85796F0FCA62985A5D1C8A5A24DBD591CAE9210E62F8C3DA4CF00A5D2DA2B356CDA684132C7B7FBAA03A687A5123F14ECB238632BF5729CEA66F950300FC4E09180D5FC0BD46C9C923F887ABAB38D6B6390EAAB7C09C8EE62C3A870FB8C07080FA7B15001D83CBAE29ACDAF36F053ED46320FFF9332B3F2754E0133A643384363E85E9D49EBF52F239CB53C5598C5496497951F2F48F2369B17015D655B2695EB6DF789A9B7B93FFBA24A3D7A3D1D4D6B5CCE5B534838FE26FB83025E2AF7A057E79407DB693AD51C1D30660E2A97C13283634F4E39B3EFEEDE4E9159E1E9DB35D1017EB2459BBCB14D134024699B52EFDE46267DB4A765F61A594B21E818F266CFBBDB2779AD9314F43C17106C61A8D7DF5B0B9AE123FF86E4C96B91B6312612C5CAA70BD22B6BE6A9AACCBD54A69E3FBD7A59D4D7E1062BBBAE9C896D0562C1EE5D43F5C2D4DDE0A600D869F78D8B43E33F4145F7F97D38C0BE6D0F59486D364F796AA01C9AA89DD9B17F8F90FD9213FBEF633F46229B1AAC21F26C8630746201F48E66A7909800C7FAE6EC62712220601222E3C32F53D66970FE823C64FA7A55B61379F66A5027AAA1CB3FE5039140DBA6ADE9B93621D1EEFBBA040993D8379E24CCAE641CD28EA42F287A90299A510C3C0C5A98369A10404C46973320A7A59726B68F0EAD400BFA5C90057990025C597F780FD81308663D59E07EE875ED14A3D4F20DE5C6CF23AB1E0FF7C909BCCE9F3F06E4264DE433FC838857CEC2633967CBBBDE72281FDA1DC7374337D72430C6EA31121DE0E91D815E0B0C3529324E9C3D055FBE0CE5F21211EFAF722ED1A6161EE0EA9A45ED514BCA8138A18C15DE9501F4944E12A446418BDF2A77AED0B645020B7C6748F96016A9C632FA6415AEF3306E7440CBB503859ED5C02AA24F79F73750585C7CE4535F3C64089924DAAA953E032287D660570A82E41CA84B6EC2942CA89AA56A3622FC7F95EECAAEA312E555750DAF0EFA695AD30975B853200A849FAD94B60C99C21AD683C388F9B8C3C3637AAA45F87636794C531D11E34E2B0C5D6379189AAF12BB7FADAAF6D03C26E72A2E0F1BBD3EEA56D8CB6580F7E8A6A2A3C03A9223581DF7FF84EC1CE0F1F4F6F448FBAAD5C001E76EF325F2BA9473DE7794D4F5CAE6BFDCC6896A2382F658807B722DCEE7360BE78E73048E71F7EF5EDB341E1FCDBBF88FFEEC5DA9AE84B44F379AB337F4CCACCBBABDA6A0ED152B9BBA1594289017C4A739632B8D1FC71EFFB65DBFB82AC95FBF9FDAAE35AD0896F7155BA29EF6E3DF97065661F0FCE4C8CDA20FF035B675E1788B2F50C5E280CC65EB4D9F4EAE5CEDD6E17CFC721702EBD150C9983447898953F663DD3D2F20D76BE4C800089B6432E23A46EE66B7B1A4D8548E03459071483D3186790453DC63EB637CE58BD46B9D2183DBAE6743A99BBF36A693B4193F7135D59CDF859D3FC7D4B531033BE48361BD4FAB2D3A8F8BA34E4AB5BE86719B0DC1DB2FF2F3FC1D32DE025F4E0DFD860D7DEBC5FA6FA932A3FB39A7FD85A0C3F1E962D2E8BBBA6334AF01F07F98A6C5CC4F2DE5258021DE25BB14410828F9122E0140229AD15DB5878FE1ADD7E5DF0725ADE644EA84F12488DDA725EF52A4C565FEBCD3632B2F72D567310980406DDB0EC59A654121DA8C7D19193DE9054E2F0D7F94DF08CED81A7B2C2C7A3462FB63BE887FB42B6BC2F5ABBD5D65E749824807AFCF41B0DC3D0A552C661C079DEC7C41A2153263045F758EAA8235E7AB0CB7222736359022DB2CD31A942181D5EDCC61081C7F023DDC9C61D3E969028771448B6D008E396B27DF042879F782D3D483FB0919A561A8A0E99C6585F890FBDF51434EF6805B6D6805C590791788424A5B12508141FCD1070D170E38E4048068C8E3ACB51B64BFD61A041385D353607D34CBCE5DC353869D97C68D5EB4532B3E8F4F9C3C87E6C20F5D3AC8DC1EF00694E47833ED789503A8D3FEEBAE5B87E4BD3C343C112FE228CB538CBC77A85CD66B10C5F35FB7C5076F900F7CAB2A191926FF2BDA710FF04DEE8EA34558D0FC7A8703FD7ED16819C33D43DF1F817A5BF5E76FFF20B374350374CF799E391EE3C6177F3753B5646EDEB380C88FC1DBA6CFF3126524AE3470356FC616F17705DBD68F92E2B4649EBC0A70A6216D623826E9D8C362607ED7D90FF10F9BACFFDFEB96A7844F50FBB5F4B5FCD6FE3035D53E3710DC2E991A830259B4135EDB8901C2A82595A58CF4FD2D181CCCCECF9BDDE37487543FE190E912846BB736CC1FC3615E2A6BA5549BF390C7A0F900D1B73D03E74EBE59ABA52733A1CF854E3DA386895654C60B18DF71D1AD315C221374F93E9104AC86AC288CEAE4778C91D245C3B9C1E39408A3F61D6ED162750B8BC3BDC62E93D79A94F26491FFED510EE0495B341FF76BE3F564B52A70F550E9DF60FA618AE539E4CF7D4F789F91D8D8F98F9480BEB7C96C43E15819D952DBC179983447898DE6FFBF4ACA956D15A93D785F43C593C266BDDE2DF07E56D6741916AB5BF31223723D169FBD607A5C3EADA3B7A8A6B3D1027DAC7F507CC3C1EC628E97D0232CCFF4845DDA9BAABF4A7270A1C9D594871C8CECE96BD610EF65760F1A3B24FC7F2A8352EABE4377AE71A80F0CE64CE79D29A9BFAD5967D7576020F71E91529B15BB1C0CC447271B049D78D00EFE24561D4A1CB59A4A9EC155B1B8C592A16EE205E667E085E65A1493B4737177624435C3A705FF7C7839793B5DC351BA764E8863C75C11D454CF8C8595F96E66E1665494328835036CAE16F6B8CB741189A014680A978F28EA023F52A229F1370ED30E459E5AE95911A90A50E8A48A4CB2E186DAF5110D38BED0657F33934F902BF106A1F6BB3DDF5009698097561CFDE2ECEBDC0630FF6CE488DA55775B5EC2C66E90F7757C09C1317CE9A7DCCCC704550CA56FAFB319107FE1975329D63CA00BEA15B35760B6EB9EE09DBEC5E3679BC45B8F2B8976E82FD517AACDF85FE70C5E5783D619AB70BA08FDA28538E32E3FB051CE406C8DEF7F12C6A2DCA601D237D54E1A5B0A794C9F7EE3A81C9F84C9D93A57336F99A7172375E76A774787B31AB51E7ABBB93843E8CCAEDD75634594A8B89187B243E5C884146120A0E69EABF075D4EDD11A1C04E3EBEDDC5CCA1759AE7ABA488E8438716AF94E8F52DBDA1F055B81332206E61DF53663DED16C4EAEF2B17A5F61AE0D0ADC2FAB55693C9C837C7F69D83BE1FF72BFAA986E9F8B961934CECB704C83B30193B7255D53D7BD9A5EDC31013C687E57DC93807CCDCFC4049883C0DAB1E8780C9E80A5A95305E4A6A5B0A68E060CEB978E2BF17086A2E79A48840721C9B3A9507D2AEA55BB6E2A796F2BD3E8EC82F175C6975AA4DA71D5DB0130B8A453CA1065AFBD0A5FC7D254862A0C3AB33CF17754FA63B05B3471E2584730683DBD23B48EEE6A2DBE3F1E1A587BF8DF76D77922A11DDD6AFF3FD02A62E288FE942037F04E14F9C1650132459B9F89FAC995A71BE741659A02DCAFEDAE3468383FE449543357EE843FE9E163981C34B78744D72DED7194FF67043A3B26759DCA684827E26379F141E0C4D8803B8E7A1E81B848B6CF706F0C4C8FA5FEAC9E7F56567615FF3AEF96A1B640D05E064668B8821295EC285B7A40F8CF26875AB116C397B578A971CD346CD81298D7A51B6D9A2C07D84A5A08F4F4254B9945CAE082C29412DD0DC4FA22E44B27DCEA83CF407FE5CAFD9F336A0F1668C556405976E8ACA2FEEBA610F95243A4ACBFCB1935E06D1294F73F4AD75542A68E909EDF896911C920FAD7D4F64315D5A53CE14E71E6D7ABE804A5236C902B81D01D60CFAC6BD6FB8B66C9672610DDC255C332FD37073B1368EA8CE998528E0B058FCAEBB9EA3BFD5CEB3E16027911517AC9DE8DF64E6A2EA4621CF41EA7FB4EFB906B14CBF03C9FD9C52E7EE49204FD853B7CA707AED97751CB3CF072C3611F4E2203A37B2B3F2579D7AE81C37C9F105B1181723C54BAF38C99FFB16F6D0F8366C6C2FC8B19CD13431A7376E355A46D22CD23F9FF3FF6C447D696B680F610CFF314384F4AF901C00DFDD3D6F5C6F8E9EAEEC710C96FB64C4D22FE8F7188A89C6BDFF561999B39FD87432F71C9C990A9360998326A30D6F483BDB44ABE990D88D1019AA4B2EA6C9902BB4418AD9026CD5332C534491CB814166E426EB8B260892BA96DBD4D061545AB720C8AD3394C1969A2FBBC68C22F2C28BF1951FCC647A45763CA912131F4BDB33E25DAA647814D6681815C69AFEC67D667F0585745F960DD7A785EC1901D1BF3741AE4064FED7A794EB0EE51069C706178AB025EA88E9DF310AB8F16DB140CD73C359FC480E1FB1A54CCC3AF99ECFEB0F0D34BD883BCFBDF874608594B670300464DF32046256C09B8D79F64A6C6AE0D9970EE1C9E2FD41500F2C65D704F68D55A7292514AFF174A605ACDB7A760B3541DA4EB048E70FA2F464BA45D91C9925839136D238E8F041013EFE1FD0AF161BF89CD4C0867E22BBB7F0FA4247C3BD1AAE7A0681A28AA4D6EB57280F2B2D9DAD4DBF39FCF0765C69AD8342CE8F1136A39170B42A0B982BA31630876DE56532C1FCA04378005C27FCE911ED3A9EF4DECF11347F729F171CE7AC33BDCC5519987B30E5CFFAAAAD20CE68034B884ACCE21BF4ECECD88888C7AC3FCFE65C4DF67A96DF296D71EBDA66B0A71624D5DC734AE3AC5EEE66DD264F6C9F7B6578F51BDE08FCB5D14B4D9C6015C1EBA94C7C573F0711EF0789D80A25A4306EB72BB080926C1C73FD44C20F4FEF9B7C86E33ED915022BEBE2DA8177D46819992137F65D5C1A0AE5704C6240F542DF0F81E35975FF8F0A8B4645AC9663ECED4086A4A87C3EAED375A23C5FB00D23A259C67FBFA976D0603C06AE48FB017EA63243AA6D92D2D09F107542CD684517A07CBC68D9C44C69279C700C5DB893546FD15B81A40B9F9963AF45A73ACF6D86C420082471AA452E0BAA0519CB645D4567427C36CC4FB594E95BEE03A28591B593CC8AC106679FADF3E2C188AD5CD6C9C8B3BBE5A021DC7123E043F0552DC737CDDD0093BA3B0EB7E0AC5CE33F9F5D2665EBC69F8E7720A126E3D9E0BF508FF8F195794621D0EE1362D818563474BB191D87DB030012B1A172C0EA3A439D1E87436FACEABC85994ED6B6B5EEBBD7DA63FED054E2AB5044E16717D1FA0BAF7E9CD11F7724F3F64404850D0CD10F31FEBD00BE99ED01FFF391E4FEA527D52CF8ECDC53D337115369B5CFD2E5DBF8FB154B5FBB5FB45C8D5259A794FC3FD37AD2FD9E0E89CC7CAF74C14B904C392D5C4E5CF48B108462C2F9786F6F05438BA3A9D50B437621B72681CE563AF45E56E45F2920D8017717B02746647E5DEBB632F78D25B79F4ADA170C71573982664D4CA7FD036F030A81F0061F92FD252085590604D63B08659C9E91333BF3D796C60544B22C5F46F53DD6AF979616766DB55A506F59442A0DE1786F0DF62CAC92D33737FC9903753562377A94CC8847519DC7FEE2FA92703D6F5C6BF67B888D2AEA861D0A93C6C13B8940B784300F3CC772E24E51B57155AF914FA2B2DB09C4F2FC6408B89F12BC246D3075AA0E9970EB5A91CCA741105DD7EF92167860C164C45D5C3FCC1AEAF8CBE336DF3D6F62B474868EE3081A4178789D009E3118046AB4216DDF6F16C8D5EB9C1EB81EBBDB11C3DA19C71A0AC9D5E38713A358074BE34713476CA7198B3B35CCC9335E39F7FBD03E4C9D736168FFBEF5AAB0347E13730F03EE303703557CCB93B528CBAF8C4DED4F2553627B99175B307BAA58BEF575A141ED197EEBAB5246C2074451D45A76BB5A6718147958367784DCAF3EE742EAA6C6214D3C36B19D70484B0CE4180D82A88CB2C3F79BB8F215BB494837CC97CE9B19EB21A8EF376CB582EA7A86040FB5E802D27418E2993ECC6495E2FDAA69A883190DA9257CEEDF84B1F592CD86FB78E9C428868D816E9112F41EF84388BFED053C8357424819BFD5990B0358FCE201BF8A3331E8CC5D593FA892696A30BFA3D641C8DA1C968358DA05C970CDE78AC7CE0F43B4CC359AA81CCD9A8C110550C81D1852B6648335A2B9304AA2208DBB31CC31BF1AE7AFFED6EB29F9C3438EA80413264CD2210E90A41FEFCB858E8A07762B84558C85A240DA156E42A1203EAF1190574E40757D7C0CAD307D530AD05527358FDE21289B40B73E143A8B3C8C71D54471DC7736AE836F5C5B2AD2855CA02FEF3C3FA65C213A62BC13EC7F6AC5A3B0C6DB4C7177CE7C04E96F69F17C9F1064E0A6C6B1146AB7B0C869A2F57BB099EE100D163AB20525421F77CD705E0D29855467364BC3782315BB0B686AF9AF102B86252E316DAB52410F10D5A297D41866530E6D69EB861F41E5EAA524B9B9A2A2338DE3DD94FAB8474FA58726B2AE48874D5CCD10502B6990129D36E45039AC845037CDBFB6063A0E8E21651A38B695FAB63C1A074C92F5BF89697B11689067BB2ED95D2222ACCA3CB63E55734B673ED3FCAFB92E61DB8352C4BF450DBCF37AD069B917430D1965120C5D2AD6B5A45C4509FECDC8CCA412E294B83E91E7000897BFB42631F46DBABE4F654F0892494169C7098042ACAB6327B038F4D9E32DFBACBC6E8D0FDC379E4350B41DFBCFD013ACCD793A4236AA83416DD417F15830FA399C6FF486DC7DAF6503D04747B5B6C2B0F8FCC591FDCFB70CFFF9C04D5D4D15EE0A50D6908D264FE04D0AEF6947E61129CC24BB936A4A25AD97522EEE02D52A60B503C129D7C61842CB9703D32F1E114ABF496F9B34286F8EEF5A4538052030660983E3881A59ABD4D8F0C909041A1D3AC87B9C03E3D018A583903959072020FF8B32EA9E630CC4B1B08A24B5C580216DDD60AACBBC91D35D1209BC0BA2EEBF1CFEF4A0B8C3E00376F542528BAC6769D91B5128D32FC56713DDF10D7A9C9314EEE7A91548605BF8679688EC28BE1F26AC672EB0D16834BC91498C70A8A0F889546C72BB0546453495C6C00FAA43F2EA1A63CA2CD951D1FCDBC1BC09502F94290452A5CF9A22DA19A8091915211B814E8A7F00B6A5DB8435B2461F47D605C7FAF73CD85A7EC95DC8AD64EBCE3BB3E54B7992B8E181BE81698AE2A01FD5890C7F08742AD1E2C2D82F08D7FF44BFD87288AEDF60318805F3A2D9DCE06564AC64C54C802B8BCB6BE7E704CDF059165B2C226A77FB1E8645F3FEA0A8571E5F540DD2891E7B3FC878C9F7EF2A76D6A9CB863D74024B4980D0C0D8D83BF41DDB5216B431917E9E56263362340FBA0C84EB2B4566840258EBD8CAAC334E1006045BC4ED3826BBCE0C1BF7E42125412A140F5AE48C8791C0250C7923F173CBE71ABCDF8C36493AD141CDAAAC0AB78CD794D9860832985E4BBB50E23578DFB2A4C628380F30481E22C74A1DB9F3F01AD2A8370A8B5EE37846750803D913542DE1549568C173436682A4F0E5CF1E447B28C1C5FB6DE05A70A763C2C773634273ED17B16B0F13AFCE10836369CA915AE937514467AE574C15EEBC533EC5ECB2D87FA60B579885D3CC0A523EDBF1529BFAB707238F626F094188D64AA142DBD550F4D3A85FEBA097380213E7F3DBDE1BCED9E839769AAE07AE315CF163F99B624D08E2DC9EF53E3B3C847F9B3FD1621A036B6734D8A321628F2A1E42B7181C65736EABF37581C45A692C049597B72B52903FC5F0617153CAB2D348C95F17FF11E362FC6F73B49203FA5C66DCF2649277C35B54DC9D9908313742CD9887C28134D45EA3CED03F4530ABA027AAD2751BA91EF7DB62FA629712E9C64B79023955649C0E14B2D9ADD1E6BC95E466EA60A685B6F8EF79ADCC3C8B259308DF560CD26E127756F9A58DB93EF99D282FF632ED547E1DCC5BD657F7CF39AB44A7C7031419E455D0E78A9EDE6C51321D8F4F0CD79CC6A338541EF91600A18CEA437ECEB9AA06E682F68EC20E101CA02835224527D0BAA7CE33E5B9AC2B7652AC4F1A7318011F4719339DD5E520DAD6D990F4A6EDCC5C79090A1B3871A8B04812927152BC27CB35CE59EB49C34EE7B859299BB51A1072C8DFA653B62E8817480A3A654F49D7B792381D8EBCCCE8638A781E4EB1620B3A0D53AEA960CB7330017863138DFE00A16B3AB696834B4589C95076F25B8C54AED6A8A467397D145AA80EB481C7A96E17117D0A88C9531CC283AC2719B2B5D6CB8A9FD833D7F3B0598AB6D664C6545FFBA5BCBFAE947215FD3A1F2889A5F1B9C1BA3AF1448EBCFF54BF00B695872D90CF64E3BF4181995059310BAB659AEDEDA9851D5AC3A9243C90C0F18141239222CDB77651F2DD7059A633F078C0753E0DDD41C843280BEB81BB20132FEEFF47EC4406CFC2FF88A90E40BFD270ADFE67107F1C76C6E7D8E0432C3DFC854EAB5FE38AC3184CBDEDC5593E3DBFC5FE5598713C549D936BE2FC6A274908897A3C34833AD9E50DED52DC3E0B8399F12E49066819D4036D224C66B4130D5C85FF32940E12569A349060471FAEDD39E32DCE51BBBA4A5315E37F36291EF774A140649D6514C0E8D4D718D834E9CC9E5314D4E1E1F59970DAF504532E75FD166400D23D463B8FCCDDED64B84BC0A97DE001A1CC06BB5F3595BAAE3D81265F687EB90AF55EE1EA6893210BDD396104C1A3A6E4A423120D20388F40A9F30FE21CA1C4EBEE8D72D7A07B48223F14EA82A6E4A8379A6F3FE931C38640A6FEA52002B553D0F25E92B742D4E7DCA1217358A8442DA24F031A53C666A6BF8DF994CEF4FD640257EFAC2D600D1F89C9556EB722B81C6C6AD853812FBE310468A42EE5008919F0F826612E191F0F78A28796C171319F2D9A9ACC11DE305E76931A3584725951E85EA62D83F058AC62896F002C6E83CB27E8D3BFBE5BCAFF043BB1C4D695A144699DF9536C8013BC8D24D9F8A6AA61C05B850B110F218B82DD5EFEC3150EB7472E4345DFFB9B401B83547F95944BC565405C51F58B1A9B69C5765BEA7BBF3B9118525A1B9141BB3614D233E35C90510B2EF00585E1953868817878E0E8FD6A163732529EAFE6984CC150D08F9E0B0773A272DA3609A37F74A7B0D46DD04A29EF3B9BB3E150FF1FA385D5F9EB6116D896BCC9B55B5AE0B68084862DCC491AF57D7E0842C4CF49C4A39C9C14BF1318CDF9FBDC0849F5F46B0F8FBD73DE0DAB7B7693F9208B61878C41E325B6F9E5544DAFB476943AA3091CCC980DAE6D7ED19E24ADB4827C6B3595B33A016F22583614B2ADE82DEEC0167AF992C60AACA52CB6BFB3200583F6E85A0C6F9AD3BD7F9FE0F67573BB64F6EF9B7C5366C4C13451D268931F590816955FBBD946B36BB71E0ECE6DD704CB3031CDC55359256417100A5AF990F09DC7A7D66BB7EEB21457A0B9D33B6F5A20E70848AB90BEA145E18E0CED6E8D3B1ADDFDA917F325FE24BC56840A0F3611E10D77E1DFE113C4246DDA7279D6E772A4F24D39A6FE6E38A7E77FA51C751BF15FB701248904231C0222546534541DEC7B849BBAB642A65C69C4D09936805D3A8886FE6F429C3E4C9366A0324D099EFD1EC77149868C5F6E5F65E5976CDBC5B425B7572D22B40C13F4561ACAA593E2731F9BDB0E1D5DF94C26C0D6A663939685619C45118509E8B956AAFF0EB2E235D677905F5A272CDCA1516E72313C7EF47738E03600C01EA64FD8AA19972328F08F75D6716CBB413B1991D653DABCE5924C2A70A19CCD5EA17E4C73AA35121C9E49DE6062E642EFA6B88E564C1DC348471A9F9A02AE2C5C857190991131032B7A2421A0088E70582DACEAC51A7EC10F9F8DBA0A7CEBCDC5AF1869CF4C24B4A50CB42BDBA203523B016140ABA832EBD000D2ACD2753070DF6E3ACD39F8AC87102733935BEE039CFBE9BD008DCDC02E12DBC5411F87D141EAD937F82843D909BD409FAA9E50805302360A76F4637818DBFEB94BBF8F1006C4275CC16496D4475C7A311059BD3C5E095FA24AAFAFF179343B8BB6A2920AF0343F98C942ECF75E9796360F7A4FAF365E4EEBE2A2935F3463195DE9DAF61735F8C25753B994B307916544D02FEB37AD457E3E4A1B5141B8D3497BE29BA97A131C1FC721EF2E20D8C5C3D99B97F78C20D180FD935CC601D567E4809A89993549FD6FC218A5E68A11B9A66FCE57586BE3EF2C9E25DAFD0F5715AF9093BA14B096F51D4FD7CBCC27A4DADEDDEA6C3DE34C282382E5FD75FEB2B73DEACD2872CADB4778A7B22C5C312C17AB031904DE4C51AA31734E22F7A8A7CA6C89E9632BEA4EC368F1E6E655FFF5C12E2302B4E109459D49FECBEEE7057507A72A15859E838E6814DC2C38033B5E0D5237898A9CC1D9D5DD7CA807F71299355ED2B4B7C3421AB2530137E5E024C60AB25A40D25AE24B3AB6FF577835848FBD6FD2D98927239B982B2BCC63D381255F630C7015B62B2EBA2CF9E00D1903D10079CB96649524F45F0D890498AA36123A73BAD3711E887C390C349E2FD51530BE38CCCE7310E66DA33122536ABAA7A95B47DF5F9DE1940F9F12FC98292D6B89E4FFF616872D9B1204B119E68AF0400ED925FBA47A566E30D82D1EB23352DA403C924D2ED812BE39D45901300ABA223AFAB5F2868821E7341513A47B6846A33F87A0282BD563350B695EAD632248388C6506D0A7C428FCA8742A9CBAB2B9A8FDDA0EBFCAFCB8FDDAE4DF042B937F8CE58DA479F72FF1770313136791C7A57A1EFEAFDD7F9D937A4EC208B1DF59B135467C3F66660E971D9E29900ECFAF8240C81CF9988CEC33945576A814068B42EFA0EB5DFF77B25580FDB80E2D647878E5CEF12A5611D822356570FED567F2D6685BFCB0E44FA0A3A319BD5D72B8983DD28AEDBF3B2F661B94621197BED6D6897050C24245925865A145FFABD3AA9C862826A267CAD093A574D631D85DE6ACD6DF503E640267EB19299BA6AC311A55FD4EF643BE9EC07D4FF33749D5D4DA99A9488F10961A6334B110BE6D769B1A41A9DC033F912FD7AFC580BB1333EEAE0AA0EBE8477E69510099EACA554BEF927B312054F58257D86F4E5B027BF2D66AB6C46DA4B95C47BBF767861959C2B9B5BE2533545CE4609A2B0F1E860A31B35322A840DAA55109039D9B86E1D439C2E0C072D4B479D26EE99FD856220E2C66A5E1858F7B9EC8108B942D2676529A653E4CC9E184E8B8FB5CFBC794C3AE1F84B42B59BB2FCD5580898F0B796602FBB796A55711EC869E974C1CB6F54E2587505C76E2EBEDD2220A3814E90FAD202274B07D41F005FC0C6C1C771992E5D33DB671B19D85924E11B04EBC307776F8ED5C0FF6076581A9473C536F5D599B36E8A255F5705D30042BE7B6F866B794EC51E6F9D90221304E17BBFDE0F5AA9FCFA44D1E2D3426D1EAB307BBF362EE209814F860C44657BC8B763DE086543817B5B4F9136714AC6C5D07EFD8D4EF999F34397384EAA660038385FE5E3226093069D05A6A914E9E7DF47572B4D1561FBEE8A3A0F21B81840812E17C54EC22C633C049970AFA5C012E947802B72160A4E0FBD12D112F9C75EC3EAC1B4ED28C7D8C72C318563EED550AE66020BFCF9E21CF7936823E04CD5DD3F5FA0A4C61E2EE4FAFA55245051DCB9B85E610265964C86BB68DCE9E39B9A30259D2038B29B39B3EF6B7AAFFB00FD0A80094F5503738AAA0C8DD0DA8B86591F1A9F0BA2A415BD2703556C5E862F9143BE14471297817A5C3372C92E34D3C66FDF7F4084F1184B1D319A288D6E7C7A28DA5088B08528FAD2E8E792F9BA75DE2F72C2521B86B3D33DF7910AA07B56635A4E399736B019A82986C5D39870464E688BDEF8482DB95CD934B46CDAC1C4DB16AF15990A4DEEEECA72A58889A4414A947E59A7F418C44236FD8B904CAAD46F4FABAAB9416D61B4CDDA053871DA6AED4B193E65D5E595E72F1841F63A3A3A5AEA3D6978A76BF6929A7163CCC5FD086F241E848AD7598DA8221BF7665CCF2E1543185BDD429B6BE0AAB5569199FA17C108C4A3A3B74F586AEDFDE615C97F22E2B398908B88DF6FFBD25129283578463B879C02DDF4BB7AB2F7A19B527BA99064E472C2A6051E24F7E38CFC9013DDBCA1D9382FA3B38F8D0235AE42F164BF659634D164428508636DA6591F240A083011D485A413C4E932F9DB805DB777743FCF42A824E2E22DEF6543F239895019DE126C06CF2A7BA8384B35D6BD45560979E3D6B2EB093D799591169D0E93BCE6681932E1FEA28049EF9F927E79D82B89C98CD626CE83478D36FC89B46CD0A3A5D49B149B367AEB52E9F78BB4E8E393C98E6ACA3F11EF652F99D0A2C51081B8CC0293A7F9629F8BF212389FEBAE29BBB9093FDB99911F039CDB8082650715CBA73EA2BF6293E4DCFCC3E5922213F33D181AA0CAB84F320DC7CB6F8F2D2E972180B773C3C885A9ABB34F76F3F4A916972C4D43C523CC5313F513ABA47CAADD62A881C04405F51209756ADD7B7F4B362ADF4A832776FAAE2D54E7D063031BED40BA7E561A33E1901E174C6FA0132FD22D479BFAAF26B7834E6E09477C673A802E2F5C122CE56867598B880B936376221A65899445E21A6837CE067C65A1D322D2106F0FBF1B1AA66166341D46B44FA81840E776B410A8C3C65C5C79BAD620AD31A7E48C3148B6F7A091508D9BACD7DDA63159DE9A9B99933E3622CA1A3D64F882D68C3A5891608C397722B20D30985F72D396555AD6E11A74A52AA9A40EC2F2B4BC9819D3F2BB2F8856F6D56B15DBE4D0B884B80A119082673B96D3D0CD54BE1306E94F4B2920DE5CD9B45603649FF975385FF179603641AFFD3B0CA3784694A2D437C81577778FD9363E58699DC79D4A9BAE5D85BE1152423E613FF6D73958A62238CC3FDD828E66AD9FC0C74F9B1AF6814687488E97F8537FD709600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%!FontType3-1.0: PingFangSC-Regular19 dict dup begin/FontType 3 def/FontMatrix matrix def/FontBBox {0 0 0 0} readonly def/PaintType 0 def/StrokeWidth 0 def/BuildGlyph{save 3 1 roll1 index dupbegin/ShowProc get 3 1 roll1 index /CharProcs get exch get exec7 -1 roll execendrestore} bind def/BuildChar{1 index /Encoding get exch get1 index /BuildGlyph get exec} bind def/$SP{3 -1 roll dup /SetupSubFont get execdup setfontexch 0 0 2 index stringwidth} bind def/$SPW{4 -1 roll dup /SetupSubFont get execdup setfont3 1 roll 0 0 0 4 2 roll} bind def/$SPTW{5 -1 roll dup /SetupSubFont get execdup setfont4 1 roll neg  0 3 -1 roll 0} bind def/$RP{6 -1 roll dup /SetupSubFont get execdup setfont 5 1 rolltranslate -90 rotate 0 0 0 4 2 roll} bind def/SetupSubFont{dup /PaintType get 1 index /StrokeWidth get3 -1 roll /$SubFontArray get 4 1 roll3 index 3 index getdup /PaintType known{dup /PaintType get}{0}ifelse1 index /StrokeWidth known{1 index /StrokeWidth get}{0}ifelse3 index ne exch 4 index ne or{dup length 2 add dict begin{1 index /FID eq {pop pop}{def}ifelse}forall/StrokeWidth exch def/PaintType exch defcurrentdict enddup /CIDFontName known{/Anonymous exch /CIDFont defineresource}{/Anonymous exch definefont}ifelsedup 4 1 roll put}{ pop pop pop get}ifelse} bind def/ShowProc{systemdict /rectfill known{0 setcachelimit}if6 -1 roll dup /FontMatrix get exch /FontBBox get aload pop4 index transform 4 2 roll5 -1 roll transform 4 2 rollsetcachedevicemoveto dup type /stringtype eq {show}{glyphshow} ifelse} bind def/FontInfo 4 dict dup begin/Registry (Adobe/) def/Ordering (Identity/) def/Supplement 0 defend readonly def/FontName /PingFangSC-Regular def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /gid7537 putdup 34 /gid4066 putdup 35 /gid1683 putdup 36 /gid3721 putdup 37 /gid3895 putdup 38 /gid6493 putdup 39 /gid6599 putdup 40 /gid5473 putdup 41 /gid6561 putdup 42 /gid6535 putdup 43 /gid5547 putdup 44 /gid5041 putdup 45 /gid1812 putdup 46 /gid1586 putdup 47 /gid4197 putdup 48 /gid6582 putdup 49 /gid7518 putdup 50 /gid3182 putdup 51 /gid5422 putdup 52 /gid5497 putdup 53 /gid7733 putdup 54 /gid3501 putreadonly def/$SubFontArray [/AAAAAE+PingFangHK-Regular findfont ] def/CharProcs 24 dictdup /gid0 {(\000) 0 $SP} 2 index /.notdef 2 index put putdup /gid1586 {(\001) 0 $SP} putdup /gid1683 {(\002) 0 $SP} putdup /gid1812 {(\003) 0 $SP} putdup /gid3182 {(\004) 0 $SP} putdup /gid3501 {(\005) 0 $SP} putdup /gid3721 {(\006) 0 $SP} putdup /gid3895 {(\007) 0 $SP} putdup /gid4066 {(\010) 0 $SP} putdup /gid4197 {(\011) 0 $SP} putdup /gid5041 {(\012) 0 $SP} putdup /gid5422 {(\013) 0 $SP} putdup /gid5473 {(\014) 0 $SP} putdup /gid5497 {(\015) 0 $SP} putdup /gid5547 {(\016) 0 $SP} putdup /gid6493 {(\017) 0 $SP} putdup /gid6535 {(\020) 0 $SP} putdup /gid6561 {(\021) 0 $SP} putdup /gid6582 {(\022) 0 $SP} putdup /gid6599 {(\023) 0 $SP} putdup /gid7518 {(\024) 0 $SP} putdup /gid7537 {(\025) 0 $SP} putdup /gid7733 {(\026) 0 $SP} put def end dup /FontName get exch definefont pop%RBIEndFontSubset
/PingFangSC-Regular cguidfix
/F1.1/PingFangSC-Regular renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs3 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 939 225 rc
0 225 m
939 225 l
939 0 l
0 0 l
h
f
/Cs2 SC
1 1 1 sc
-1594.3214 1779.75 m
3155.6785 1779.75 l
3155.6785 -1797.0358 l
-1594.3214 -1797.0358 l
h
-1594.3214 1779.75 m
f
3 w
1 j
0.60000002 i
/Cs3 SC
0 0 0 sc
1 0 0 -1 -47 636 cm
50 415 m
194 415 l
194 486 l
50 486 l
h
50 415 m
S
/Cs1 SC
0 sc
0 i
/F1.1[ 24 0 0 -24 0 0]sf
74 459 m
(!"#$)[ 24.000000 24.000000 24.000000 0.000000 ] xS
0.60000002 i
/Cs3 SC
0 0 0 sc
314 415 m
458 415 l
458 486 l
314 486 l
h
314 415 m
S
/Cs1 SC
0 sc
0 i
338 459 m
(%&#$)[ 24.000000 24.000000 24.000000 0.000000 ] xS
0.60000002 i
/Cs3 SC
0 0 0 sc
577.12 414 m
721.12 414 l
721.12 485 l
577.12 485 l
h
577.12 414 m
S
/Cs1 SC
0 sc
0 i
601.12 458 m
('\(\)*)[ 24.000000 24.000000 24.000000 0.000000 ] xS
0.60000002 i
/Cs3 SC
0 0 0 sc
839.94958 412.67001 m
983.94958 412.67001 l
983.94958 483.67001 l
839.94958 483.67001 l
h
839.94958 412.67001 m
S
/Cs1 SC
0 sc
0 i
887.94958 456.67001 m
(+,)[ 24.000000 0.000000 ] xS
0.60000002 i
/Cs3 SC
0 0 0 sc
839.94958 563 m
983.94958 563 l
983.94958 634 l
839.94958 634 l
h
839.94958 563 m
S
/Cs1 SC
0 sc
0 i
863.94958 607 m
(-./0)[ 24.000000 24.000000 24.000000 0.000000 ] xS
0.60000002 i
/Cs3 SC
0 0 0 sc
577.12 563 m
721.12 563 l
721.12 634 l
577.12 634 l
h
577.12 563 m
S
/Cs1 SC
0 sc
0 i
601.12 607 m
(12/0)[ 24.000000 24.000000 24.000000 0.000000 ] xS
0.60000002 i
/Cs3 SC
0 0 0 sc
313.38623 563 m
457.38623 563 l
457.38623 634 l
313.38623 634 l
h
313.38623 563 m
S
/Cs1 SC
0 sc
0 i
337.38623 607 m
(34/0)[ 24.000000 24.000000 24.000000 0.000000 ] xS
0.60000002 i
/Cs3 SC
0 0 0 sc
49.354088 563 m
193.3541 563 l
193.3541 634 l
49.354088 634 l
h
49.354088 563 m
S
/Cs1 SC
0 sc
0 i
73.354088 607 m
(56/0)[ 24.000000 24.000000 24.000000 0.000000 ] xS
1 J
[
12
12
] 0 d
0.60000002 i
/Cs2 SC
0 0 0 sc
195.5 450.5 m
296.60001 450.5 l
S
0 i
CM
260.79999 185.5 m
249.60001 189.7 l
249.60001 181.3 l
h
260.79999 185.5 m
f
0 J
0 j
[] 0 d
1 0 0 -1 -47 636 cm
307.79999 450.5 m
296.60001 446.29999 l
296.60001 454.70001 l
h
307.79999 450.5 m
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
459.5 450.22067 m
559.72009 449.83978 l
S
0 i
CM
523.92004 186.2028 m
512.70416 190.3602 l
512.73608 181.96027 l
h
523.92004 186.2028 m
f
0 J
0 j
[] 0 d
1 0 0 -1 -47 636 cm
570.92004 449.79721 m
559.70416 445.6398 l
559.73608 454.03973 l
h
570.92004 449.79721 m
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
722.62 449.12805 m
822.5498 448.62241 l
S
0 i
CM
786.74963 187.43428 m
775.52856 191.57756 l
775.57104 183.17766 l
h
786.74963 187.43428 m
f
0 J
0 j
[] 0 d
1 0 0 -1 -47 636 cm
833.74963 448.5657 m
822.52856 444.42245 l
822.57104 452.82233 l
h
833.74963 448.5657 m
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
911.94958 485.17001 m
911.94958 545.59998 l
S
0 i
CM
864.94958 79.199997 m
869.1496 90.400002 l
860.74957 90.400002 l
h
864.94958 79.199997 m
f
0 J
0 j
[] 0 d
1 0 0 -1 -47 636 cm
911.94958 556.79999 m
916.1496 545.59998 l
907.74957 545.59998 l
h
911.94958 556.79999 m
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
838.44958 598.5 m
738.52002 598.5 l
S
0 i
CM
680.32001 37.5 m
691.52002 33.299999 l
691.52002 41.700001 l
h
680.32001 37.5 m
f
0 J
0 j
[] 0 d
1 0 0 -1 -47 636 cm
727.32001 598.5 m
738.52002 602.70001 l
738.52002 594.29999 l
h
727.32001 598.5 m
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
575.62 598.5 m
474.78622 598.5 l
S
0 i
CM
416.58624 37.5 m
427.78622 33.299999 l
427.78622 41.700001 l
h
416.58624 37.5 m
f
0 J
0 j
[] 0 d
1 0 0 -1 -47 636 cm
463.58624 598.5 m
474.78622 602.70001 l
474.78622 594.29999 l
h
463.58624 598.5 m
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
311.88623 598.5 m
210.75409 598.5 l
S
0 i
CM
152.55409 37.5 m
163.75409 33.299999 l
163.75409 41.700001 l
h
152.55409 37.5 m
f
0 J
0 j
[] 0 d
1 0 0 -1 -47 636 cm
199.55409 598.5 m
210.75409 602.70001 l
210.75409 594.29999 l
h
199.55409 598.5 m
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
0 0.58980101 1 sc
121.83852 487.5 m
121.58496 545.60016 l
S
0 i
CM
74.536079 79.199959 m
78.78492 90.381516 l
70.384995 90.418175 l
h
74.536079 79.199959 m
f
0 J
0 j
[] 0 d
1 0 0 -1 -47 636 cm
121.53608 556.80005 m
125.78492 545.61847 l
117.38499 545.58185 l
h
121.53608 556.80005 m
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
187.84656 487.5 m
305.67813 553.71106 l
S
0 i
CM
268.44223 76.802399 m
260.7356 85.9505 l
256.62067 78.627426 l
h
268.44223 76.802399 m
f
0 J
0 j
[] 0 d
1 0 0 -1 -47 636 cm
315.44223 559.19757 m
307.7356 550.0495 l
303.62067 557.37256 l
h
315.44223 559.19757 m
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
451.78 487.5 m
569.48181 553.70502 l
S
0 i
CM
532.24359 76.804169 m
524.54089 85.955597 l
520.42279 78.634308 l
h
532.24359 76.804169 m
f
0 J
0 j
[] 0 d
1 0 0 -1 -47 636 cm
579.24359 559.19586 m
571.54089 550.04437 l
567.42279 557.36572 l
h
579.24359 559.19586 m
S
1 J
1 j
[
12
12
] 0 d
0.60000002 i
714.38641 486.5 m
832.85126 553.65857 l
S
0 i
CM
795.59448 76.817902 m
787.92261 85.995132 l
783.77997 78.687706 l
h
795.59448 76.817902 m
f
0 J
0 j
[] 0 d
1 0 0 -1 -47 636 cm
842.59448 559.18207 m
834.92261 550.00488 l
830.77997 557.31232 l
h
842.59448 559.18207 m
S
ep
end
%%Trailer
%%EOF
